/* Copyright (c) 2015, Thomas Lang. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef __AVL__
#define __AVL__

#include "node.h"

#define TRUE            1
#define FALSE           0

#define ABS(x) ((x >= 0) ? x : -x)

/* Indicator that nothing changed to the balance of the tree. */
#define NO_CHANGE       0
/* Indicator that the tree is 'one more heavy' on the right side. */
#define REBAL_ONE_POS   1
/* Indicator that the tree is 'one more heavy' on the right side. */
#define REBAL_ONE_NEG (-1)
/* Indicator that the tree is 'one more heavy' on the right side. */
#define REBAL_TWO_POS   2
/* Indicator that the tree is 'one more heavy' on the right side. */
#define REBAL_TWO_NEG (-2)

/*
 * Implementation of an AVL tree.<p>
 * An AVL tree is a binary tree named after its inventors Georgi Maximowitsch 
 * <strong>A</strong>delson-<strong>V</strong>elski and Jewgeni Michailowitsch
 * <strong>L</strong>andis. This kind of tree is a so called 
 * <em>self-balancing</em> tree, that is always as balanced as possible, so
 * such a tree cannot get degenerated by insertion or deletions of nodes.
 * This in advance guarantees, that search operations, insertions, deletions
 * <em>always</em> run in <code>O(log n)</code> with <code>n</code> as the 
 * number of nodes in the tree.
 *
 * @author Thomas Lang
 * @version 1.0, 2015-07-29
 * @see <a href="https://en.wikipedia.org/wiki/AVL_tree">AVLs on Wikipedia</a>
 */
typedef struct {
    /* The number of elements stored in the tree. */
    int size;
    /* The root node of the tree. */
    Node *root;
} AVLTree;

/*
 * For documentation of the below methods please check out 'avl.c'.
 */

AVLTree *newAVL();
void clear(AVLTree*);
void freeAVL(AVLTree*);
void printAVL(AVLTree*);
int contains(AVLTree*, int);
int insert(AVLTree*, int);
int isEmpty(AVLTree*);
int removeNode(AVLTree*, int);
int size(AVLTree*);
Node *get(AVLTree*, int);

#endif
