

(define make-set
  (lambda()
    (list '())))

(define is-empty?
  (lambda(set)
    (equal? '(()) set)))

(define insert
  (lambda(set value)
    (if (contains set value)
        #f
        (begin
          (set-car! set (cons value (car set)))
          #t))))

(define delete
  (lambda(set value)
    (if (is-empty? set)
        #f
        (delete-rec set value))))

(define delete-rec
  (lambda(set value)
    (let ((head (car (car set)))
          (tail (cdr (car set))))
      (if (equal? head value)
          (set-car! set tail)
          (set-car! set (cons head (delete-rec tail value)))))))

(define print-set
  (lambda(set)
    (display (car (set)))))

